// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostAuditData, PostAuditResponse, PostCredentialsData, PostCredentialsResponse, DeleteCredentialData, DeleteCredentialResponse, GetCredentialsSchemaByCredentialTypeNameData, GetCredentialsSchemaByCredentialTypeNameResponse, GetExecutionsData, GetExecutionsResponse, DeleteExecutionsByIdData, DeleteExecutionsByIdResponse, GetExecutionsByIdData, GetExecutionsByIdResponse, GetTagsData, GetTagsResponse, PostTagsData, PostTagsResponse, DeleteTagsByIdData, DeleteTagsByIdResponse, GetTagsByIdData, GetTagsByIdResponse, PutTagsByIdData, PutTagsByIdResponse, GetWorkflowsData, GetWorkflowsResponse, PostWorkflowsData, PostWorkflowsResponse, DeleteWorkflowsByIdData, DeleteWorkflowsByIdResponse, GetWorkflowsByIdData, GetWorkflowsByIdResponse, PutWorkflowsByIdData, PutWorkflowsByIdResponse, PostWorkflowsByIdActivateData, PostWorkflowsByIdActivateResponse, PostWorkflowsByIdDeactivateData, PostWorkflowsByIdDeactivateResponse, PutWorkflowsByIdTransferData, PutCredentialsByIdTransferData, GetWorkflowsByIdTagsData, GetWorkflowsByIdTagsResponse, PutWorkflowsByIdTagsData, PutWorkflowsByIdTagsResponse, GetUsersData, GetUsersResponse, PostUsersData, PostUsersResponse, DeleteUsersByIdData, DeleteUsersByIdResponse, GetUsersByIdData, GetUsersByIdResponse, PatchUsersByIdRoleData, PostSourceControlPullData, PostSourceControlPullResponse, GetVariablesData, GetVariablesResponse, PostVariablesData, DeleteVariablesByIdData, DeleteVariablesByIdResponse, GetProjectsData, GetProjectsResponse, PostProjectsData, DeleteProjectsByProjectIdData, DeleteProjectsByProjectIdResponse, PutProjectsByProjectIdData, PutProjectsByProjectIdResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Generate an audit
 * Generate a security audit for your n8n instance.
 */
export const postAudit = <ThrowOnError extends boolean = false>(options?: Options<PostAuditData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuditResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/audit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a credential
 * Creates a credential that can be used by nodes of the specified type.
 */
export const postCredentials = <ThrowOnError extends boolean = false>(options: Options<PostCredentialsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCredentialsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete credential by ID
 * Deletes a credential from your instance. You must be the owner of the credentials
 */
export const deleteCredential = <ThrowOnError extends boolean = false>(options: Options<DeleteCredentialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCredentialResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/credentials/{id}',
        ...options
    });
};

/**
 * Show credential data schema
 */
export const getCredentialsSchemaByCredentialTypeName = <ThrowOnError extends boolean = false>(options: Options<GetCredentialsSchemaByCredentialTypeNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCredentialsSchemaByCredentialTypeNameResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/credentials/schema/{credentialTypeName}',
        ...options
    });
};

/**
 * Retrieve all executions
 * Retrieve all executions from your instance.
 */
export const getExecutions = <ThrowOnError extends boolean = false>(options?: Options<GetExecutionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExecutionsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/executions',
        ...options
    });
};

/**
 * Delete an execution
 * Deletes an execution from your instance.
 */
export const deleteExecutionsById = <ThrowOnError extends boolean = false>(options: Options<DeleteExecutionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExecutionsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/executions/{id}',
        ...options
    });
};

/**
 * Retrieve an execution
 * Retrieve an execution from your instance.
 */
export const getExecutionsById = <ThrowOnError extends boolean = false>(options: Options<GetExecutionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/executions/{id}',
        ...options
    });
};

/**
 * Retrieve all tags
 * Retrieve all tags from your instance.
 */
export const getTags = <ThrowOnError extends boolean = false>(options?: Options<GetTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags',
        ...options
    });
};

/**
 * Create a tag
 * Create a tag in your instance.
 */
export const postTags = <ThrowOnError extends boolean = false>(options: Options<PostTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTagsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a tag
 * Deletes a tag.
 */
export const deleteTagsById = <ThrowOnError extends boolean = false>(options: Options<DeleteTagsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options
    });
};

/**
 * Retrieves a tag
 * Retrieves a tag.
 */
export const getTagsById = <ThrowOnError extends boolean = false>(options: Options<GetTagsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options
    });
};

/**
 * Update a tag
 * Update a tag.
 */
export const putTagsById = <ThrowOnError extends boolean = false>(options: Options<PutTagsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTagsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve all workflows
 * Retrieve all workflows from your instance.
 */
export const getWorkflows = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows',
        ...options
    });
};

/**
 * Create a workflow
 * Create a workflow in your instance.
 */
export const postWorkflows = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a workflow
 * Deletes a workflow.
 */
export const deleteWorkflowsById = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkflowsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkflowsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}',
        ...options
    });
};

/**
 * Retrieves a workflow
 * Retrieves a workflow.
 */
export const getWorkflowsById = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}',
        ...options
    });
};

/**
 * Update a workflow
 * Update a workflow.
 */
export const putWorkflowsById = <ThrowOnError extends boolean = false>(options: Options<PutWorkflowsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkflowsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Activate a workflow
 * Active a workflow.
 */
export const postWorkflowsByIdActivate = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsByIdActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowsByIdActivateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/activate',
        ...options
    });
};

/**
 * Deactivate a workflow
 * Deactivate a workflow.
 */
export const postWorkflowsByIdDeactivate = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsByIdDeactivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowsByIdDeactivateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/deactivate',
        ...options
    });
};

/**
 * Transfer a workflow to another project.
 * Transfer a workflow to another project.
 */
export const putWorkflowsByIdTransfer = <ThrowOnError extends boolean = false>(options: Options<PutWorkflowsByIdTransferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/transfer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Transfer a credential to another project.
 * Transfer a credential to another project.
 */
export const putCredentialsByIdTransfer = <ThrowOnError extends boolean = false>(options: Options<PutCredentialsByIdTransferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/credentials/{id}/transfer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get workflow tags
 * Get workflow tags.
 */
export const getWorkflowsByIdTags = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowsByIdTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowsByIdTagsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/tags',
        ...options
    });
};

/**
 * Update tags of a workflow
 * Update tags of a workflow.
 */
export const putWorkflowsByIdTags = <ThrowOnError extends boolean = false>(options: Options<PutWorkflowsByIdTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkflowsByIdTagsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve all users
 * Retrieve all users from your instance. Only available for the instance owner.
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create multiple users
 * Create one or more users.
 */
export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a user
 * Delete a user from your instance.
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by ID/Email
 * Retrieve a user from your instance. Only available for the instance owner.
 */
export const getUsersById = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Change a user's global role
 * Change a user's global role
 */
export const patchUsersByIdRole = <ThrowOnError extends boolean = false>(options: Options<PatchUsersByIdRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pull changes from the remote repository
 * Requires the Source Control feature to be licensed and connected to a repository.
 */
export const postSourceControlPull = <ThrowOnError extends boolean = false>(options: Options<PostSourceControlPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSourceControlPullResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/source-control/pull',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve variables
 * Retrieve variables from your instance.
 */
export const getVariables = <ThrowOnError extends boolean = false>(options?: Options<GetVariablesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVariablesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/variables',
        ...options
    });
};

/**
 * Create a variable
 * Create a variable in your instance.
 */
export const postVariables = <ThrowOnError extends boolean = false>(options: Options<PostVariablesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/variables',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a variable
 * Delete a variable from your instance.
 */
export const deleteVariablesById = <ThrowOnError extends boolean = false>(options: Options<DeleteVariablesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVariablesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/variables/{id}',
        ...options
    });
};

/**
 * Retrieve projects
 * Retrieve projects from your instance.
 */
export const getProjects = <ThrowOnError extends boolean = false>(options?: Options<GetProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects',
        ...options
    });
};

/**
 * Create a project
 * Create a project in your instance.
 */
export const postProjects = <ThrowOnError extends boolean = false>(options: Options<PostProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a project
 * Delete a project from your instance.
 */
export const deleteProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectsByProjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectsByProjectIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Update a project
 * Update a project.
 */
export const putProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<PutProjectsByProjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutProjectsByProjectIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};